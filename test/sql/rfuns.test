# name: test/sql/rfuns.test
# description: test rfuns extension
# group: [rfuns]

# Before we load the extension, this will fail
statement error
SELECT rfuns('Sam');
----
Catalog Error: Scalar Function with name rfuns does not exist!

# Require statement will ensure this test is run with this extension loaded
require rfuns

# Confirm the extension works
query I
SELECT rfuns('Sam');
----
Rfuns Sam üê•

# Addition for integers
query IIIIII
SELECT
	"r_base::+"(1, 2),
	"r_base::+"(1000000, 2000000),
	"r_base::+"(1000000000, 2000000000),
	"r_base::+"(1, NULL),
	"r_base::+"(NULL, 2),
	NULL
	;
----
3
3000000
NULL
NULL
NULL
NULL

# Addition for doubles
query IIIIII
SELECT
	"r_base::+"(1.0, 2.0),
	"r_base::+"(CAST('NaN' AS DOUBLE), 2),
	"r_base::+"(1, CAST('NaN' AS DOUBLE)),
	"r_base::+"(NULL, 2),
	"r_base::+"(1, NULL),
	NULL
	;
----
3.0
NULL
NULL
NULL
NULL
NULL


# Equality for integers
query IIIII
SELECT
	"r_base::=="(1, 2),
	"r_base::=="(1, 1),
	"r_base::=="(1, NULL),
	"r_base::=="(NULL, 2),
	NULL
	;
----
FALSE
TRUE
NULL
NULL
NULL

# Equality for booleans
query IIIIIIIIII
SELECT
	"r_base::=="(TRUE, TRUE),
	"r_base::=="(TRUE, FALSE),
	"r_base::=="(FALSE, TRUE),
	"r_base::=="(FALSE, FALSE),
	"r_base::=="(NULL, FALSE),
	"r_base::=="(NULL, TRUE),
	"r_base::=="(TRUE, NULL),
	"r_base::=="(FALSE, NULL),
	"r_base::=="(NULL, NULL),
	NULL
	;
----
TRUE
FALSE
FALSE
TRUE
NULL
NULL
NULL
NULL
NULL
NULL

# Equality for integers with boolean
query IIIIIIIIII
SELECT
	"r_base::=="(1   , TRUE),
	"r_base::=="(1   , FALSE),
	"r_base::=="(2   , TRUE),
	"r_base::=="(2   , FALSE),
	"r_base::=="(0   , TRUE),
	"r_base::=="(0   , FALSE),
	"r_base::=="(NULL, TRUE),
	"r_base::=="(NULL, NULL),
	"r_base::=="(42  , NULL),
	NULL
	;
----
TRUE
FALSE
FALSE
FALSE
FALSE
TRUE
NULL
NULL
NULL
NULL

# Equality for boolean with integer
query IIIIIIIIII
SELECT
	"r_base::=="(TRUE , 1),
	"r_base::=="(FALSE, 1),
	"r_base::=="(TRUE , 2),
	"r_base::=="(FALSE, 2),
	"r_base::=="(TRUE , 0),
	"r_base::=="(FALSE, 0),
	"r_base::=="(TRUE , NULL),
	"r_base::=="(NULL , NULL),
	"r_base::=="(NULL , 42),
	NULL
	;
----
TRUE
FALSE
FALSE
FALSE
FALSE
TRUE
NULL
NULL
NULL
NULL

# Equality for doubles
query IIIII
SELECT
	"r_base::=="(1.5, 2),
	"r_base::=="(1.5, 1.5),
	"r_base::=="(1.5, NULL),
	"r_base::=="(NULL, 2.5),
	NULL
	;
----
FALSE
TRUE
NULL
NULL
NULL

# Equality for strings
query IIIII
SELECT
	"r_base::=="('a', 'b'),
	"r_base::=="('a', 'a'),
	"r_base::=="('a', NULL),
	"r_base::=="(NULL, 'a'),
	NULL
	;
----
FALSE
TRUE
NULL
NULL
NULL

# Equality for strings with doubles
query III
SELECT
	"r_base::=="('2', 1.0),
	"r_base::=="('1', 1.0),
	NULL
	;
----
FALSE
TRUE
NULL

# Equality for doubles with strings
query III
SELECT
	"r_base::=="(1.0, '2'),
	"r_base::=="(1.0, '1'),
	NULL
	;
----
FALSE
TRUE
NULL

# Equality for ints with doubles
query III
SELECT
	"r_base::=="('2', 1),
	"r_base::=="('1', 1),
	NULL
	;
----
FALSE
TRUE
NULL

# Equality for doubles with ints
query III
SELECT
	"r_base::=="(1, '2'),
	"r_base::=="(1, '1'),
	NULL
	;
----
FALSE
TRUE
NULL
